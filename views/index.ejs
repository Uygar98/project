<!DOCTYPE html>
<html>

<head>
    <title>Uygar</title>
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>




    <video id="myvideoTag" autoplay></video>
    <video id="theirvideoTag" autoplay></video>

    <div>
        <label>Firstname</label><input id="myName" type="text" />
        <label>Message</label><input id="myMessage" type="text" />
        <input id="sendMessage" type="submit" />
        <div id="chatArea">This is all the messages</br></div>
        <div id="signalingArea">Signaling Messages</br></div>
    </div>


    <script>

        var myvideoArea = document.querySelector("#myvideoTag");
        var theirvideoArea = document.querySelector("#theirvideoTag");


        var myName = document.querySelector("#myName");
        var myMessage = document.querySelector("#myMessage");
        var sendMessage = document.querySelector("#sendMessage");
        var chatArea = document.querySelector("#chatArea");
        var signalingArea = document.querySelector("#signalingArea");
        var ROOM = "chat";
        var SIGNAL_ROOM = "signal_room";
        var config = {
            'iceServers': [{
                'url': 'stun:stun.l.google.com:19302'
            }]
        };

        var rtcPeerConn;




        io = io.connect();
        io.emit('ready', { "chat_room": ROOM, "signal_room": SIGNAL_ROOM });

        io.emit('signal', { "type": "user_here", "message": "ready for call?", "room": SIGNAL_ROOM });

        io.on('signaling_message', function (data) {
            displaySignalMessage("Signal received:" + data.type);

            if (!rtcPeerConn)
                startSignaling();


            if (data.type != "user_here") {
                var message = JSON.parse(data.message);
                if (message.sdp) {
                    rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
                        // if we received and offer, we need to answer
                        if (rtcPeerConn.remoteDescription.type == 'offer') {
                            rtcPeerConn.createAnswer(sendLocalDesc, logError);
                        }
                    }, logError);
                }
                else {
                    rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
                }
            }
        });

        function startSignaling() {
            displaySignalMessage("started signaling...");

            rtcPeerConn = new webkitRTCPeerConnection(config);

            rtcPeerConn.onicecandidate = function (evt) {
                if (evt.candidates)
                    io.emit('signal', {
                        "type": "ice candidate", "message": JSON.stringify({
                            'candidate': evt.candidate
                        }), "room": SIGNAL_ROOM
                    });
                displaySignalMessage("completed the ice candiate..");
            };

            rtcPeerConn.onnegotiationneeded = function () {
                displaySignalMessage("on negotionaton called");
                rtcPeerConn.createOffer(sendLocalDesc, logError);
            }

            rtcPeerConn.onaddstream = function (evt) {
                displaySignalMessage("going to add their stream...");
                theirvideoArea.srcObject = evt.stream;
            };

            // get a local stream, show it in our video tag and add it to be sent 
            navigator.getUserMedia = navigator.getUserMedia ||
                navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
            navigator.getUserMedia({
                'audio': false,
                'video': true
            }, function (stream) {
                displaySignalMessage("Going to display my stream...");
                myvideoArea.srcObject = stream;
                rtcPeerConn.addStream(stream);
            }, logError);


        }

        function sendLocalDesc(desc) {
            rtcPeerConn.setLocalDescription(desc, function () {
                displaySignalMessage("sending local description");
                io.emit('signal', {
                    "type": "SDP", "message": JSON.stringify({
                        'sdp':
                            rtcPeerConn.localDescription
                    }), "room": SIGNAL_ROOM
                });
            }, logError);
        }

        function logError(error) {
            displaySignalMessage(error.name + ': ' + error.message);

        }




        io.on('annouce', function (data) {
            displayMessage(data.message);

        });

        io.on('message', function (data) {
            displayMessage(data.author + ": " + data.message);

        });

        function displayMessage(message) {
            chatArea.innerHTML = chatArea.innerHTML + "<br/>" + message;
        }

        function displaySignalMessage(message) {
            signalingArea.innerHTML = signalingArea.innerHTML + "<br/>" + message;
        }


        sendMessage.addEventListener('click', function (ev) {

            io.emit('send', { "author": myName.value, "message": myMessage.value, "room": ROOM });
            ev.preventDefault();

        }, false);






    </script>

</body>

</html>